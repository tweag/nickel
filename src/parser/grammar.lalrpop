//! The Nickel grammar.
//!
//! # Uniterm
//!
//! Nickel uses the uniterm grammar since
//! [RFC002](../rfcs/002-merge-types-terms-syntax.md). Uniterm is a common
//! grammar for both term and types. However, it is only a front-end: the rest of
//! the interpreter pipeline needs terms and types to be separate objects.
//!
//! Most of the time, grammar constructs determine unambiguously if an expression
//! should be considered as a type or a term. Typically, `e1 -> e2` will always
//! be a type, and `e1 + e2` a term. This doesn't contradict the fact that `e1 ->
//! e2` can be used as a term: the point is, even in the latter case, we still
//! parse `e1 -> e2` as a type first, and then derive a term from it wherever it
//! is used in a context expecting a term.
//!
//! This is not the case of all rules. Record literals and variables can both be
//! interpreted in a different way, depending on how their usage. In
//! `x : {foo : Num}`, `{foo : Num}` is interpreted as a record type. In `{foo :
//! Num}.foo`, it is a record literal with a missing definition for `foo`. The
//! first interpretation is **not** equivalent to first interpreting it as a
//! term, and then as a type.
//!
//! For those reasons, the `uniterm` module introduces a new AST definition, that
//! just wraps `RichTerm` and `Types`, together with dedicated variants for the
//! common constructs that are variables and records. As long as a common
//! construct is not used in a term or a type context, it can be still
//! interpreted as both. Once the usage determines the nature of a record or a
//! variable, it is converted to either a `RichTerm` or a `Types` (although still
//! possibly wrapped as a `UniTerm`).
//!
//! In consequence, this grammar uses three main types `RichTerm`, `Types` and
//! `UniTerm`, as well as conversion macros `AsTerm`, `AsType` and `AsUniTerm`.
//! Some rules that are known to only produce `RichTerm` or `Types` may have the
//! corresponding more precise return type. Other rules that produce or just
//! propagate general uniterms have to return a `UniTerm`.
use std::{
    collections::HashMap,
    ffi::OsString,
    convert::TryFrom,
};

use codespan::FileId;
use lalrpop_util::ErrorRecovery;

use super::{
    ExtendedTerm,
    utils::*,
    lexer::{Token, NormalToken, StringToken, MultiStringToken},
    error::ParseError,
    uniterm::*,
};

use crate::{
    mk_app,
    mk_opn,
    mk_fun,
    identifier::Ident,
    destruct::{Match, LastMatch, Destruct},
    term::{
        BinaryOp, RichTerm, Term, UnaryOp, StrChunk, MetaValue,
        MergePriority, Contract, NAryOp, RecordAttrs, SharedTerm,
        NumeralPriority, array::Array, make as mk_term,
    },
    types::{
        Types, TypeF, EnumRows, EnumRowsF, RecordRows, RecordRowsF,
        VarKind
    },
    position::TermPos,
    label::Label,
};

grammar<'input, 'err, 'wcard>(
    src_id: FileId,
    errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, ParseError>>,
    next_wildcard_id: &'wcard mut usize,
);

WithPos<Rule>: Rule = <l: @L> <t: Rule> <r: @R> => t.with_pos(mk_pos(src_id, l, r));

AsTerm<Rule>: RichTerm = <ut: WithPos<Rule>> =>?
    RichTerm::try_from(ut)
        .map_err(|e| lalrpop_util::ParseError::User{error: e});

AsType<Rule>: Types = <ut: WithPos<Rule>> =>?
    Types::try_from(ut)
        .map_err(|e| lalrpop_util::ParseError::User{error: e});

AsUniTerm<Rule>: UniTerm = <l: @L> <ut: Rule> <r: @R> =>
    UniTerm::from(ut).with_pos(mk_pos(src_id, l, r));

AnnotSeries<AnnotAtom>: AnnotAtom = <AnnotAtom+> =>
    <>.into_iter().fold(Default::default(), Annot::combine);

// A single type or meta-data annotation. The `Types` rule forbids the use of
// constructs that can themselves have annotation on the right, such as a `let`.
// Otherwise, `foo | let x = 1 in x : Num` is ambiguous (the annotation could be
// either `foo | (let x = 1 in (x : Num))` or `(foo | let x = 1 in x) : Num`).
//
// The rule to use for type annotations is given as a parameter. We always use a
// rule that is syntactically equivalent to the `Types` rule. The parameter is
// here to control if the type should have its variables fixed now (`FixedType`)
// or later (bare `Types`). Almost all rules are of the former kind, and use
// `FixedType` (see `FixedType` and `parser::utils::fix_type_vars`).
AnnotAtom<TypeRule>: MetaValue = {
    "|" <l: @L> <ty: TypeRule> <r: @R> => MetaValue {
        contracts: vec![Contract {types: ty.clone(), label: mk_label(ty, src_id, l, r)}],
        ..Default::default()
    },
    "|" "default" => MetaValue {
        priority: MergePriority::Bottom,
        ..Default::default()
    },
    "|" "force" => MetaValue {
        priority: MergePriority::Top,
        ..Default::default()
    },
    "|" "priority" <SignedNumLiteral> => MetaValue {
        // unwrap(): a literal can't be NaN
        priority: MergePriority::Numeral(NumeralPriority::try_from(<>).unwrap()),
        ..Default::default()
    },
    "|" "doc" <s: StaticString> => MetaValue {
        doc: Some(strip_indent_doc(s)),
        ..Default::default()
    },
    "|" "optional" => MetaValue {
        opt: true,
        ..Default::default()
    },
    ":" <l: @L> <ty: TypeRule> <r: @R> => MetaValue {
        types: Some(Contract {types: ty.clone(), label: mk_label(ty, src_id, l, r)}),
        ..Default::default()
    },
};

ExtdAnnotAtom<TypeRule>: ExtdAnnot = {
    <AnnotAtom<TypeRule>> => <>.into(),
    "|" "push force" => ExtdAnnot {
        push_force: true,
        ..Default::default()
    },
    "|" "push default" => ExtdAnnot {
        push_default: true,
        ..Default::default()
    },
}

// An annotation, with possibly many annotations chained.
Annot<TypeRule>: MetaAnnot = AnnotSeries<AnnotAtom<TypeRule>>;

// An extended annotation, with possibly many annotations chained.
ExtdAnnot<TypeRule>: ExtdAnnot = AnnotSeries<ExtdAnnotAtom<TypeRule>>;

// A general term. Wrap the root of the grammar as a `RichTerm`.
pub Term: RichTerm = AsTerm<UniTerm>;

// A general type. Chosen such that it can't have top-level annotations.
// (see `AnnotAtom`)
Types: Types = {
    AsType<InfixExpr>,
    Forall,
};

// A type with type variables fixed. See `parser::utils::fix_type_vars`.
FixedType: Types = {
    <mut ty: Types> => {
        ty.fix_type_vars();
        ty
    }
};

// Either a term or a top-level let-binding (a let-binding without an `in`).
// Used exclusively for the REPL.
pub ExtendedTerm: ExtendedTerm = {
    "let" <id: Ident> <ann: ExtdAnnot<FixedType>?> "=" <mut t: Term> => {
        if let Some(ann) = ann {
            let pos = t.pos;
            t = ann.attach(t, pos);
        }

        ExtendedTerm::ToplevelLet(id, t)
    },
    Term => ExtendedTerm::RichTerm(<>),
};

// A general uniterm. The root of the grammar.
UniTerm: UniTerm = {
    InfixExpr,
    AnnotatedInfixExpr,
    AsUniTerm<Forall>,
    "let" <l: @L> <recursive:"rec"?> <r: @R> <pat:Pattern> <ann: ExtdAnnot<FixedType>?>
        "=" <mut t1: Term>
        "in" <t2: Term> =>? {
        if let Some(ann) = ann {
            let pos = t1.pos;
            t1 = ann.attach(t1, pos);
        }

        Ok(UniTerm::from(mk_let(recursive.is_some(), pat.0, pat.1, t1, t2, mk_span(src_id, l, r))?))
    },
    <l: @L> "fun" <pats: Pattern+> "=>" <t: Term> <r: @R> => {
        let pos = mk_pos(src_id, l, r);
        let rt = pats.into_iter().rev().fold(t, |t, (id, destruct)| RichTerm {
            term: SharedTerm::new(Term::FunPattern(id, destruct, t)),
            pos,
        });

        UniTerm::from(rt)
    },
    "switch" "{" <cases: (SwitchCase ",")*> <last: SwitchCase?> "}"
        <exp: Term> => {
        let mut acc = HashMap::with_capacity(cases.len());
        let mut default = None;

        for case in cases.into_iter().map(|x| x.0).chain(last.into_iter()) {
            match case {
                SwitchCase::Normal(id, t) => acc.insert(id, t),
                // If there are multiple default cases, the last one silently
                // erases the others. We should have a dedicated error for that
                SwitchCase::Default(t) => default.replace(t),
            };
        }

        UniTerm::from(
            Term::Switch(
                exp,
                acc,
                default,
            )
        )
    },
    "if" <cond: Term> "then" <t1: Term> "else" <t2: Term> =>
        UniTerm::from(mk_app!(Term::Op1(UnaryOp::Ite(), cond), t1, t2)),
    <l: @L> <t: !> <r: @R> => {
        let pos = mk_pos(src_id, l, r);
        errors.push(t.clone());

        UniTerm::from(RichTerm::new(Term::ParseError(
            crate::error::ParseError::from_lalrpop(t.error, src_id)
        ), pos))
    },
};

AnnotatedInfixExpr: UniTerm = {
    <t: AsTerm<InfixExpr>> <ann: ExtdAnnot<FixedType>> => {
        let pos = t.pos;
        UniTerm::from(ann.attach(t, pos))
    },
};

Forall: Types =
    "forall" <ids: Ident+> "." <ty: Types> => {
        ids.into_iter().rev().fold(
            ty,
            // The variable kind will be determined during the `fix_type_vars`
            // phase. For now, we put a random one (which is also the default
            // one, for unused type variables)
            |acc, var| Types(TypeF::Forall { var, var_kind: VarKind::Type, body: Box::new(acc) })
        )
    };

// A n-ary application-like expression (n may be 0, in the sense that this rule
// also includes previous levels).
Applicative: UniTerm = {
    "import" <s: StaticString> => UniTerm::from(Term::Import(OsString::from(s))),
    AsUniTerm<TypeArray>,
    <t1: AsTerm<Applicative>> <t2: AsTerm<RecordOperand>> =>
        UniTerm::from(mk_app!(t1, t2)),
    <op: UOp> <t: AsTerm<RecordOperand>> => UniTerm::from(mk_term::op1(op, t)),
    <op: BOpPre> <t1: AsTerm<RecordOperand>> <t2: AsTerm<Atom>>
        => UniTerm::from(mk_term::op2(op, t1, t2)),
    NOpPre<AsTerm<RecordOperand>>,
    RecordOperand,
};

// The parametrized array type.
TypeArray: Types = "Array" <AsType<RecordOperand>> =>
    Types(TypeF::Array(Box::new(<>)));

RecordOperand: UniTerm = {
    Atom,
    AsUniTerm<RecordOperationChain>,
};

// A record operation chain, such as `{foo = data}.bar.baz`.
RecordOperationChain: RichTerm = {
    <t: AsTerm<RecordOperand>> "." <id: Ident> => mk_term::op1(UnaryOp::StaticAccess(id), t),
    <t: AsTerm<RecordOperand>> "." <t_id: WithPos<StrChunks>> => mk_access(t_id, t),
};

RecordRowTail: RecordRows = {
    <Ident> => RecordRows(RecordRowsF::TailVar(<>)),
    "Dyn" => RecordRows(RecordRowsF::TailDyn),
};

// A record, that can be later interpreted either as a record literal or as a
// record type.
UniRecord: UniRecord = {
   "{" <fields: (<RecordField> ",")*>
       <last_l: @L> <last: RecordLastField?> <last_r: @R>
       <tail_l: @L> <tail: (";" RecordRowTail)?> <tail_r: @R>
   "}" => {
        let (last_field, attrs) = match last {
            Some(RecordLastField::Field(f)) => (Some(f), Default::default()),
            Some(RecordLastField::Ellipsis) =>
                (None, RecordAttrs { open: true }),
            None => (None, Default::default())
        };

        let pos_ellipsis = if attrs.open {
                mk_pos(src_id, last_l, last_r)
            }
            else {
                TermPos::None
            };

        let fields : Vec<_> = fields.into_iter().chain(last_field.into_iter()).collect();
        UniRecord {
            fields,
            tail: tail.map(|t| (t.1, mk_pos(src_id, tail_l, tail_r))),
            attrs,
            pos: TermPos::None,
            pos_ellipsis,
        }
    },
};

Atom: UniTerm = {
    "(" <AsUniTerm<CurriedOp>> ")",
    "(" <UniTerm> ")",
    "num literal" => UniTerm::from(Term::Num(<>)),
    "null" => UniTerm::from(Term::Null),
    Bool => UniTerm::from(Term::Bool(<>)),
    AsUniTerm<StrChunks>,
    Ident => UniTerm::from(UniTermNode::Var(<>)),
    WithPos<UniRecord> => UniTerm::from(UniTermNode::Record(<>)),
    <EnumTag> => UniTerm::from(Term::Enum(<>)),
    "[" <terms: (<Term> ",")*> <last: Term?> "]" => {
        let terms = terms
            .into_iter()
            .chain(last.into_iter())
            .collect();

        UniTerm::from(Term::Array(terms, Default::default()))
    },
    AsUniTerm<TypeAtom>,
};

// A record field definition. The is the only place where we don't fix the type
// variables inside the annotation right away (note the `Annot<Types>` instead
// of `Annot<Fixed>`).
RecordField: (FieldPath, RichTerm) = {
    <l: @L> <path: FieldPath> <ann: ExtdAnnot<Types>?> <r: @R> <t: ("=" <Term>)?> => {
        let pos = t.as_ref()
            .map(|t| t.pos.clone())
            .unwrap_or(mk_pos(src_id, l, r));
        let term = match (ann, t) {
            (Some(ExtdAnnot { meta, push_force: false, push_default: false }), None) => {
                RichTerm::new(Term::MetaValue(meta), pos)
            }
            (Some(ann), Some(t)) => {
                ann.attach(t, pos)
            }
            (Some(_), None) => {
                panic!("can't use push default/push force on a field without definition");
            }
            (None, Some(t)) => t,
            (None, None) => RichTerm::new(Term::MetaValue(MetaValue::new()), pos),
        };

        (path, term)
    }
};

RecordLastField: RecordLastField = {
    <RecordField> => RecordLastField::Field(<>),
    ".." => RecordLastField::Ellipsis,
};

// A field path syntax in a field definition, as in `{foo."bar bar".baz = "value"}`.
FieldPath: Vec<FieldPathElem> = {
    <mut elems: (<FieldPathElem> ".")*> <last: FieldPathElem> => {
        elems.push(last);
        elems
    }
};

FieldPathElem: FieldPathElem = {
    <Ident> => FieldPathElem::Ident(<>),
    <WithPos<StrChunks>> => FieldPathElem::Expr(<>),
};

// Last field of a pattern
LastMatch: LastMatch = {
    Match => LastMatch::Match(Box::new(<>)),
    ".." <Ident?> => LastMatch::Ellipsis(<>),
};

// The right hand side of an `=` inside a destructuring pattern.
#[inline]
Pattern: (Option<Ident>,Destruct) = {
    <id:(<Ident> "@")?> <pat:Destruct> => (id,pat),
    Ident => (Some(<>),Destruct::Empty),
};

// A full pattern at the left-hand side of a destructuring let.
Destruct: Destruct = {
    <start: @L> "{" <mut matches: (<Match> ",")*> <last:LastMatch?> "}" <end: @R> => {
        let (open, rest) = match last {
            Some(LastMatch::Match(m)) => {
                matches.push(*m);
                (false,None)
            },
            Some(LastMatch::Ellipsis(rest)) => (true, rest),
            _ => (false, None),
        };

        let span = mk_span(src_id, start, end);
        Destruct::Record{matches, open, rest, span}
    },
};

// A binding `ident = <pattern>` inside a destructuring pattern.
Match: Match = {
    <left:Ident> <anns: Annot<FixedType>?> <default: DefaultAnnot?> "=" <right: Pattern> => {
        let meta = combine_match_annots(anns, default, left.pos.unwrap());
        Match::Assign(left, meta, right)
    },
    <id:Ident> <anns: Annot<FixedType>?> <default: DefaultAnnot?> => {
        let meta = combine_match_annots(anns, default, id.pos.unwrap());
        Match::Simple(id, meta)
    },
};

// A default annotation in a pattern.
DefaultAnnot: MetaAnnot = "?" <t: Term> => MetaValue {
    priority: MergePriority::Bottom,
    value: Some(t),
    ..Default::default()
};

Ident: Ident = <l:@L> <i: "identifier"> <r:@R> =>
    Ident::new_with_pos(i, mk_pos(src_id, l, r));

Bool: bool = {
    "true" => true,
    "false" => false,
};

// Strings that support interpolation.
StrChunks: RichTerm = {
  <start: StringStart> <fst: ChunkLiteral?> <chunks: (ChunkExpr+ChunkLiteral)*> <lasts:ChunkExpr*> <end: StringEnd> => {
        debug_assert_eq!(start, end);

        let chunks: Vec<StrChunk<RichTerm>> = fst.into_iter()
            .map(StrChunk::Literal)
            .chain(chunks.into_iter()
                .map(|(mut es, s)| {
                    es.push(StrChunk::Literal(s));
                    es
                })
                .flatten())
            .chain(lasts.into_iter())
            .collect();

        let mut chunks = if start == StringKind::Multiline {
            strip_indent(chunks)
        }
        else {
            chunks
        };
        chunks.reverse();

        RichTerm::from(Term::StrChunks(chunks))
    },
};

StringStart : StringKind = {
    "\"" => StringKind::Standard,
    "m%\"" => StringKind::Multiline,
};

StringEnd : StringKind = {
    "\"" => StringKind::Standard,
    "\"%m" => StringKind::Multiline,
};

ChunkLiteral : String =
    <parts: ChunkLiteralPart+> => {
        parts.into_iter().fold(String::new(), |mut acc, part| {
            match part {
                ChunkLiteralPart::Str(s) => acc.push_str(s),
                ChunkLiteralPart::Char(c) => acc.push(c),
            };

            acc
        })
    };

ChunkExpr: StrChunk<RichTerm> = Interpolation <t: WithPos<Term>> "}" => StrChunk::Expr(t, 0);

Interpolation = { "%{", "multstr %{" };

// A construct which looks like a string, but is generic over its delimiters.
// Used to implement `StaticString` as well as `StringEnumTag`.
DelimitedStaticString<Start, End>: String = Start <s: ChunkLiteral?> End => s.unwrap_or_default();

StaticString = DelimitedStaticString<StringStart, StringEnd>;

StringEnumTag = DelimitedStaticString<"`\"", "\"">;

EnumTag: Ident = {
  "raw enum tag" => <>.into(),
  <StringEnumTag> => <>.into(),
};

ChunkLiteralPart: ChunkLiteralPart<'input> = {
    "str literal" => ChunkLiteralPart::Str(<>),
    "multstr literal" => ChunkLiteralPart::Str(<>),
    "str esc char" => ChunkLiteralPart::Char(<>),
};

UOp: UnaryOp = {
    "typeof" => UnaryOp::Typeof(),
    "blame" => UnaryOp::Blame(),
    "chng_pol" => UnaryOp::ChangePolarity(),
    "polarity" => UnaryOp::Pol(),
    "go_dom" => UnaryOp::GoDom(),
    "go_codom" => UnaryOp::GoCodom(),
    "go_array" => UnaryOp::GoArray(),
    "embed" <Ident> => UnaryOp::Embed(<>),
    "map"  => UnaryOp::ArrayMap(),
    "generate" => UnaryOp::ArrayGen(),
    "record_map" => UnaryOp::RecordMap(),
    "seq" => UnaryOp::Seq(),
    "deep_seq" => UnaryOp::DeepSeq(None),
    "op force" => UnaryOp::Force(None),
    "head" => UnaryOp::ArrayHead(),
    "tail" => UnaryOp::ArrayTail(),
    "length" => UnaryOp::ArrayLength(),
    "fields" => UnaryOp::FieldsOf(),
    "values" => UnaryOp::ValuesOf(),
    "str_trim" => UnaryOp::StrTrim(),
    "str_chars" => UnaryOp::StrChars(),
    "char_code" => UnaryOp::CharCode(),
    "char_from_code" => UnaryOp::CharFromCode(),
    "str_uppercase" => UnaryOp::StrUppercase(),
    "str_lowercase" => UnaryOp::StrLowercase(),
    "str_length" => UnaryOp::StrLength(),
    "str_from" => UnaryOp::ToStr(),
    "num_from" => UnaryOp::NumFromStr(),
    "enum_from" => UnaryOp::EnumFromStr(),
    "str_is_match" => UnaryOp::StrIsMatch(),
    "str_match" => UnaryOp::StrMatch(),
    "push_force_op" => UnaryOp::PushForce(),
    "push_default_op" => UnaryOp::PushDefault(),
};

SwitchCase: SwitchCase = {
    <id: EnumTag> "=>" <t: Term> => SwitchCase::Normal(id, t),
    "_" "=>" <t: Term> => SwitchCase::Default(<>),
}

// Infix operators by precedence levels. Lowest levels take precedence over
// highest ones.

InfixBOp2: BinaryOp = {
    "++" => BinaryOp::StrConcat(),
    "@" => BinaryOp::ArrayConcat(),
}

InfixBOp3: BinaryOp = {
    "*" => BinaryOp::Mult(),
    "/" => BinaryOp::Div(),
    "%" => BinaryOp::Modulo(),
}

InfixBOp4: BinaryOp = {
    "+" => BinaryOp::Plus(),
    "-" => BinaryOp::Sub(),
}

InfixUOp5: UnaryOp = {
    "!" => UnaryOp::BoolNot(),
}

InfixBOp6: BinaryOp = {
    "&" => BinaryOp::Merge(),
}

InfixBOp7: BinaryOp = {
    "<" => BinaryOp::LessThan(),
    "<=" => BinaryOp::LessOrEq(),
    ">" => BinaryOp::GreaterThan(),
    ">=" => BinaryOp::GreaterOrEq(),
}

InfixBOp8: BinaryOp = {
    "==" => BinaryOp::Eq(),
}

InfixLazyBOp9: UnaryOp = {
    "&&" => UnaryOp::BoolAnd(),
}

InfixLazyBOp10: UnaryOp = {
    "||" => UnaryOp::BoolOr(),
}

InfixBOp: BinaryOp = {
    InfixBOp2,
    InfixBOp3,
    InfixBOp4,
    InfixBOp6,
    InfixBOp7,
    InfixBOp8,
}

InfixUOpOrLazyBOp: UnaryOp = {
    InfixUOp5,
    InfixLazyBOp9,
    InfixLazyBOp10,
}

InfixOp: InfixOp = {
    <InfixBOp> => <>.into(),
    <InfixUOpOrLazyBOp> => <>.into(),
}

CurriedOp: RichTerm = {
    <l: @L> <op: InfixOp> <r: @R> =>
        op.eta_expand(mk_pos(src_id, l, r)),
    <l: @L> "|>" <r: @R> =>
        mk_fun!("x1", "x2",
            mk_app!(mk_term::var("x2"), mk_term::var("x1"))
            .with_pos(mk_pos(src_id, l, r))
        ),
    <l: @L> "!=" <r: @R> =>
        mk_fun!("x1", "x2",
            mk_term::op1(
                UnaryOp::BoolNot(),
                Term::Op2(BinaryOp::Eq(),
                    mk_term::var("x2"),
                    mk_term::var("x1")
                )
            )
            .with_pos(mk_pos(src_id, l, r))
        ),
    //<l: @L> "->" <r: @R> =>?
    //    UniTerm::from(
    //        mk_fun!("x1", "x2",
    //            mk_term::op1(
    //                UnaryOp::BoolNot(),
    //                Term::Op2(BinaryOp::Eq(),
    //                    mk_term::var("x2"),
    //                    mk_term::var("x1")
    //                )
    //            )
    //            .with_pos(mk_pos(src_id, l, r))
    //        )
    //    ),
}

InfixUOpApp<UOp, Expr>: UniTerm =
  <op: UOp> <t: AsTerm<Expr>> => UniTerm::from(mk_term::op1(op, t));

InfixBOpApp<BOp, LExpr, RExpr>: UniTerm =
  <t1: AsTerm<LExpr>> <op: BOp> <t2: AsTerm<RExpr>> =>
      UniTerm::from(mk_term::op2(op, t1, t2));

InfixLazyBOpApp<UOp, LExpr, RExpr>: UniTerm =
  <t1: AsTerm<LExpr>> <op: UOp> <t2: AsTerm<RExpr>> =>
    UniTerm::from(mk_app!(mk_term::op1(op, t1), t2));

InfixExpr: UniTerm = {
    #[precedence(level="0")]
    Applicative,

    #[precedence(level="1")]
    "-" <AsTerm<InfixExpr>> =>
        UniTerm::from(mk_term::op2(BinaryOp::Sub(), Term::Num(0.0), <>)),

    #[precedence(level="2")] #[assoc(side="left")]
    InfixBOpApp<InfixBOp2, InfixExpr, InfixExpr>,

    #[precedence(level="3")] #[assoc(side="left")]
    InfixBOpApp<InfixBOp3, InfixExpr, InfixExpr>,

    #[precedence(level="4")] #[assoc(side="left")]
    InfixBOpApp<InfixBOp4, InfixExpr, InfixExpr>,

    #[precedence(level="5")]
    InfixUOpApp<InfixUOp5, InfixExpr>,

    #[precedence(level="6")] #[assoc(side="left")]
    InfixBOpApp<InfixBOp6, InfixExpr, InfixExpr>,
    <t1: AsTerm<InfixExpr>> "|>" <t2: AsTerm<InfixExpr>> =>
        UniTerm::from(mk_app!(t2, t1)),

    #[precedence(level="7")] #[assoc(side="left")]
    InfixBOpApp<InfixBOp7, InfixExpr, InfixExpr>,

    #[precedence(level="8")] #[assoc(side="left")]
    InfixBOpApp<InfixBOp8, InfixExpr, InfixExpr>,
    <t1: AsTerm<InfixExpr>> "!=" <t2: AsTerm<InfixExpr>> =>
        UniTerm::from(
            mk_term::op1(UnaryOp::BoolNot(), Term::Op2(BinaryOp::Eq(), t1, t2))
        ),

    #[precedence(level="9")] #[assoc(side="left")]
    InfixLazyBOpApp<InfixLazyBOp9, InfixExpr, InfixExpr>,

    #[precedence(level="10")] #[assoc(side="left")]
    InfixLazyBOpApp<InfixLazyBOp10, InfixExpr, InfixExpr>,

    #[precedence(level="11")] #[assoc(side="right")]
    <s: AsType<InfixExpr>> "->" <t: AsType<InfixExpr>> =>
        UniTerm::from(Types(TypeF::Arrow(Box::new(s), Box::new(t)))),
}

BOpPre: BinaryOp = {
    "assume" => BinaryOp::Assume(),
    "array_lazy_assume" => BinaryOp::ArrayLazyAssume(),
    "unseal" => BinaryOp::Unseal(),
    "seal" => BinaryOp::Seal(),
    "go_field" => BinaryOp::GoField(),
    "has_field" => BinaryOp::HasField(),
    "elem_at" => BinaryOp::ArrayElemAt(),
    "tag" => BinaryOp::Tag(),
    "hash" => BinaryOp::Hash(),
    "serialize" => BinaryOp::Serialize(),
    "deserialize" => BinaryOp::Deserialize(),
    "pow" => BinaryOp::Pow(),
    "str_split" => BinaryOp::StrSplit(),
    "str_contains" => BinaryOp::StrContains(),
    "record_insert" => BinaryOp::DynExtend(),
    "record_remove" => BinaryOp::DynRemove(),
}

NOpPre<ArgRule>: UniTerm = {
    "str_replace" <t1: ArgRule> <t2: ArgRule> <t3: ArgRule> =>
        UniTerm::from(mk_opn!(NAryOp::StrReplace(), t1, t2, t3)),
    "str_replace_regex" <t1: ArgRule> <t2: ArgRule> <t3: ArgRule> =>
        UniTerm::from(mk_opn!(NAryOp::StrReplaceRegex(), t1, t2, t3)),
    "str_substr" <t1: ArgRule> <t2: ArgRule> <t3: ArgRule> =>
        UniTerm::from(mk_opn!(NAryOp::StrSubstr(), t1, t2, t3)),
}

TypeBuiltin: Types = {
    "Dyn" => Types(TypeF::Dyn),
    "Num" => Types(TypeF::Num),
    "Bool" => Types(TypeF::Bool),
    "Str" => Types(TypeF::Str),
}

TypeAtom: Types = {
    <TypeBuiltin>,
    "[|" <rows:(<EnumTag> ",")*> <last: (<EnumTag>)?> <tail: (";" <Ident>)?> "|]" => {
        let ty = rows.into_iter()
            .chain(last.into_iter())
            // As we build row types as a linked list via a fold on the original
            // iterator, the order of identifiers is reversed. This not a big deal
            // but it's less confusing to the user to print them in the original
            // order for error reporting.
            .rev()
            .fold(
                EnumRows(
                    match tail {
                        Some(id) => EnumRowsF::TailVar(id),
                        None => EnumRowsF::Empty,
                    }
                ),
                |erows, row| EnumRows(EnumRowsF::Extend { row, tail: Box::new(erows) })
            );
        Types(TypeF::Enum(ty))
    },
    "{" "_" ":" <Types> "}" => Types(TypeF::Dict(Box::new(<>))),
    "_" => {
        let id = *next_wildcard_id;
        *next_wildcard_id += 1;
        Types(TypeF::Wildcard(id))
    },
}

SignedNumLiteral: f64 = <sign: "-"?> <value: "num literal"> => {
    if sign.is_some() {
        -value
    } else {
        value
    }
};

extern {
    type Location = usize;
    type Error = ParseError;

    enum Token<'input> {
        "identifier" => Token::Normal(NormalToken::Identifier(<&'input str>)),
        "str literal" => Token::Str(StringToken::Literal(<&'input str>)),
        "str esc char" => Token::Str(StringToken::EscapedChar(<char>)),
        "multstr literal" => Token::MultiStr(MultiStringToken::Literal(<&'input str>)),
        "num literal" => Token::Normal(NormalToken::NumLiteral(<f64>)),

        "raw enum tag" => Token::Normal(NormalToken::RawEnumTag(<&'input str>)),
        "`\"" => Token::Normal(NormalToken::StrEnumTagBegin),

        "if" => Token::Normal(NormalToken::If),
        "then" => Token::Normal(NormalToken::Then),
        "else" => Token::Normal(NormalToken::Else),
        "forall" => Token::Normal(NormalToken::Forall),
        "in" => Token::Normal(NormalToken::In),
        "let" => Token::Normal(NormalToken::Let),
        "rec" => Token::Normal(NormalToken::Rec),
        "switch" => Token::Normal(NormalToken::Switch),

        "null" => Token::Normal(NormalToken::Null),
        "true" => Token::Normal(NormalToken::True),
        "false" => Token::Normal(NormalToken::False),

        "?" => Token::Normal(NormalToken::QuestionMark),
        "," => Token::Normal(NormalToken::Comma),
        ";" => Token::Normal(NormalToken::Semicolon),
        ":" => Token::Normal(NormalToken::Colon),
        "$" => Token::Normal(NormalToken::Dollar),
        "=" => Token::Normal(NormalToken::Equals),
        "!=" => Token::Normal(NormalToken::NotEquals),
        "&" => Token::Normal(NormalToken::Ampersand),
        "." => Token::Normal(NormalToken::Dot),
        "%{" => Token::Str(StringToken::Interpolation),
        "multstr %{" => Token::MultiStr(MultiStringToken::Interpolation),

        "+" => Token::Normal(NormalToken::Plus),
        "-" => Token::Normal(NormalToken::Minus),
        "*" => Token::Normal(NormalToken::Times),
        "/" => Token::Normal(NormalToken::Div),
        "%" => Token::Normal(NormalToken::Percent),
        "++" => Token::Normal(NormalToken::DoublePlus),
        "==" => Token::Normal(NormalToken::DoubleEq),
        "@" => Token::Normal(NormalToken::At),
        "&&" => Token::Normal(NormalToken::DoubleAnd),
        "||" => Token::Normal(NormalToken::DoublePipe),
        "!" => Token::Normal(NormalToken::Bang),
        ".." => Token::Normal(NormalToken::Ellipsis),

        "fun" => Token::Normal(NormalToken::Fun),
        "import" => Token::Normal(NormalToken::Import),
        "|" => Token::Normal(NormalToken::Pipe),
        "|>" => Token::Normal(NormalToken::RightPipe),
        "->" => Token::Normal(NormalToken::SimpleArrow),
        "=>" => Token::Normal(NormalToken::DoubleArrow),
        "_" => Token::Normal(NormalToken::Underscore),
        "\"" => Token::Normal(NormalToken::DoubleQuote),
        "\"%m" => Token::MultiStr(MultiStringToken::End),
        "m%\"" => Token::Normal(NormalToken::MultiStringStart(<usize>)),

        "Num" => Token::Normal(NormalToken::Num),
        "Dyn" => Token::Normal(NormalToken::Dyn),
        "Str" => Token::Normal(NormalToken::Str),
        "Bool" => Token::Normal(NormalToken::Bool),
        "Array" => Token::Normal(NormalToken::Array),

        "tag" => Token::Normal(NormalToken::Tag),
        "typeof" => Token::Normal(NormalToken::Typeof),
        "assume" => Token::Normal(NormalToken::Assume),
        "array_lazy_assume" => Token::Normal(NormalToken::ArrayLazyAssume),
        "op force" => Token::Normal(NormalToken::OpForce),
        "blame" => Token::Normal(NormalToken::Blame),
        "chng_pol" => Token::Normal(NormalToken::ChangePol),
        "polarity" => Token::Normal(NormalToken::Polarity),
        "go_dom" => Token::Normal(NormalToken::GoDom),
        "go_codom" => Token::Normal(NormalToken::GoCodom),
        "go_array" => Token::Normal(NormalToken::GoArray),
        "go_field" => Token::Normal(NormalToken::GoField),
        "seal" => Token::Normal(NormalToken::Seal),
        "unseal" => Token::Normal(NormalToken::Unseal),
        "embed" => Token::Normal(NormalToken::Embed),
        "record_map" => Token::Normal(NormalToken::RecordMap),
        "record_insert" => Token::Normal(NormalToken::RecordInsert),
        "record_remove" => Token::Normal(NormalToken::RecordRemove),
        "seq" => Token::Normal(NormalToken::Seq),
        "deep_seq" => Token::Normal(NormalToken::DeepSeq),
        "head" => Token::Normal(NormalToken::Head),
        "tail" => Token::Normal(NormalToken::Tail),
        "length" => Token::Normal(NormalToken::Length),
        "fields" => Token::Normal(NormalToken::FieldsOf),
        "values" => Token::Normal(NormalToken::ValuesOf),
        "pow" => Token::Normal(NormalToken::Pow),
        "push_force_op" => Token::Normal(NormalToken::PushForceOp),
        "push_default_op" => Token::Normal(NormalToken::PushDefaultOp),

        "has_field" => Token::Normal(NormalToken::HasField),
        "map" => Token::Normal(NormalToken::Map),
        "generate" => Token::Normal(NormalToken::ArrayGen),
        "elem_at" => Token::Normal(NormalToken::ElemAt),

        "merge" => Token::Normal(NormalToken::Merge),
        "default" => Token::Normal(NormalToken::Default),
        "force" => Token::Normal(NormalToken::Force),
        "doc" => Token::Normal(NormalToken::Doc),
        "optional" => Token::Normal(NormalToken::Optional),
        "priority" => Token::Normal(NormalToken::Priority),
        "push force" => Token::Normal(NormalToken::PushForce),
        "push default" => Token::Normal(NormalToken::PushDefault),

        "hash" => Token::Normal(NormalToken::OpHash),
        "serialize" => Token::Normal(NormalToken::Serialize),
        "deserialize" => Token::Normal(NormalToken::Deserialize),
        "str_split" => Token::Normal(NormalToken::StrSplit),
        "str_trim" => Token::Normal(NormalToken::StrTrim),
        "str_chars" => Token::Normal(NormalToken::StrChars),
        "char_code" => Token::Normal(NormalToken::CharCode),
        "char_from_code" => Token::Normal(NormalToken::CharFromCode),
        "str_uppercase" => Token::Normal(NormalToken::StrUppercase),
        "str_lowercase" => Token::Normal(NormalToken::StrLowercase),
        "str_contains" => Token::Normal(NormalToken::StrContains),
        "str_replace" => Token::Normal(NormalToken::StrReplace),
        "str_replace_regex" => Token::Normal(NormalToken::StrReplaceRegex),
        "str_is_match" => Token::Normal(NormalToken::StrIsMatch),
        "str_match" => Token::Normal(NormalToken::StrMatch),
        "str_length" => Token::Normal(NormalToken::StrLength),
        "str_substr" => Token::Normal(NormalToken::StrSubstr),
        "str_from" => Token::Normal(NormalToken::ToStr),
        "num_from" => Token::Normal(NormalToken::NumFromStr),
        "enum_from" => Token::Normal(NormalToken::EnumFromStr),

        "{" => Token::Normal(NormalToken::LBrace),
        "}" => Token::Normal(NormalToken::RBrace),
        "[" => Token::Normal(NormalToken::LBracket),
        "]" => Token::Normal(NormalToken::RBracket),
        "(" => Token::Normal(NormalToken::LParen),
        ")" => Token::Normal(NormalToken::RParen),
        "<" => Token::Normal(NormalToken::LAngleBracket),
        "<=" => Token::Normal(NormalToken::LessOrEq),
        ">" => Token::Normal(NormalToken::RAngleBracket),
        ">=" => Token::Normal(NormalToken::GreaterOrEq),
        "[|" => Token::Normal(NormalToken::EnumOpen),
        "|]" => Token::Normal(NormalToken::EnumClose),
    }
}
