expr : type.
typ : type.
contract : type.

(* Lambda constructs *)
let : expr -> bindone expr expr -> expr.
lam : bindone expr expr -> expr.
app : expr -> expr -> expr.

(* Constants *)
eint : int -> expr.
ebool : bool -> expr.
estr : string -> expr.

(* Operations *)
ite : expr -> expr -> expr -> expr.

unop : type.
eunop : unop -> expr -> expr.
blame : unop.
isNum : unop.
isBool : unop.
isStr : unop.
isFun : unop.

binop : type.
ebinop : expr -> binop -> expr -> expr.
add : binop.
sub : binop.
mul : binop.

(* Typing *)
promise : contract -> expr -> expr.
assume : contract -> expr -> expr -> expr.

(* Blaming *)
label : string -> expr.

(* Variables *)
named : string -> expr.

(* Types *)
tdyn : typ.
tnum : typ.
tbool : typ.
tstr : typ.
tlbl : typ.
tarrow : typ -> typ -> typ.

fromExpr : expr -> contract.
fromTyp : typ -> contract.

(* Get the expression contract of a given type *)
typToExpr : typ -> expr -> prop.
typToExpr tdyn (lam (bind _ (fun l => lam (bind _ 
  (fun t => t))))).
typToExpr tnum (lam (bind _ (fun l => lam (bind _ 
  (fun t => ite (eunop isNum t) t (eunop blame l)))))).
typToExpr tbool (lam (bind _ (fun l => lam (bind _ 
  (fun t => ite (eunop isBool t) t (eunop blame l)))))).
typToExpr tstr (lam (bind _ (fun l => lam (bind _ 
  (fun t => ite (eunop isStr t) t (eunop blame l)))))).
typToExpr (tarrow S T) (lam (bind _ (fun l => lam (bind _ 
  (fun t => ite (eunop isFun t) (lam (bind _ (fun x => app (app Ct l) (app t (app (app Cs l) x))))) (eunop blame l)))))) :-
    typToExpr S Cs,
    typToExpr T Ct.

(* Other *)

find : string -> list (tuple string A) -> A -> prop.
find S [] _ :- log_error S `Not found in record ${S}`, failure.
find S ((S, E) :: _) E.
find S ((S', _) :: TL) E :-
  not (eq S S'),
  find S TL E.
