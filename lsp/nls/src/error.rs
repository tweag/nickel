use lsp_server::{ErrorCode, ResponseError};
use lsp_types::{Position, Url};

/// Non-fatal errors generated by nls.
#[derive(Debug, thiserror::Error)]
pub enum Error {
    #[error("file {0} not found")]
    FileNotFound(Url),

    #[error("position {pos:?} invalid for file {file}")]
    InvalidPosition { pos: Position, file: Url },
}

impl From<Error> for ResponseError {
    fn from(value: Error) -> Self {
        let code = match value {
            Error::FileNotFound(_) => ErrorCode::InvalidParams,
            Error::InvalidPosition { .. } => ErrorCode::InvalidParams,
        };
        ResponseError {
            code: code as i32,
            message: value.to_string(),
            data: None,
        }
    }
}
